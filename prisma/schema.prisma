// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../generated/client"
}

generator docs {
  // provider = "prisma-docs-generator"
  provider = "node node_modules/prisma-docs-generator"
  output   = "../generated/docs"
}

generator json {
  // provider = "prisma-json-schema-generator"
  provider = "node node_modules/prisma-json-schema-generator"
  output   = "../generated/json"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  name String?
}

model Test {
  id Int @id @default(autoincrement())
  aaa String @db.Text
  // @map 是给字段指定另一个名字
  bbb Int @db.TinyInt @map("bbb2")
  // @db.xxx 可以指定具体的 mysql 的数据类型，有括号的是可以填入参数的，比如 VARCHAR 可以指定长度：
  ccc String @db.VarChar(50) @unique

  // @@map 是给表指定另一个名字
  @@map("test_test2")
  //  @@index 则是创建一个索引，这里创建了 bbb、ccc 的联合索引。
  @@index([bbb, ccc])
}

model Department {
  id Int @id @default(autoincrement())
  name String @db.VarChar(20)
  // 创建时间使用 @default(now()) 的方式指定，这样插入数据的时候会自动填入当前时间
  createTime DateTime @default(now())
  // 更新时间使用 @updatedAt，会自动设置当前时间。
  updateTime DateTime @updatedAt
  // 一个部门下有多个员工，部门跟员工的关系是一对多
  employees Employee[]
}

model Employee {
  id Int @id @default(autoincrement())
  name String @db.VarChar(20)
  phone String @db.VarChar(30)
  departmentId Int @unique
  // 员工和部门是多对一关系，在员工那一侧添加一个 departmentId 的列，然后通过 @relation 声明 departmentId 的列引用 department 的 id 列。
  department Department @relation(fields: [departmentId], references: [id])
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String?
  published Boolean @default(false)
  tags TagOnPosts[]
}

model Tag {
  id Int @id @default(autoincrement())
  name String
  posts TagOnPosts[]
}

model TagOnPosts {
  post Post @relation(fields: [postId], references: [id])
  postId Int
  
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int

  // @@id 创建一个联合主键
  @@id([postId, tagId])
}

model Aaa {
  id Int @id @default(autoincrement())
  role Role @default(EMPLOYEE)
}

enum Role {
  ADMIN
  EMPLOYEE
}